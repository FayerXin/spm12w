function roidata = spm12w_roitool(varargin)
% spm12w_roitool('roi_file','sids','coords')
%
% Inputs
% ------
% roi_file: File specifying the parameters for roi analysis and specification
%           (e.g., 'roi_tutorial.m'). If the path is left unspecified,
%           spm12w_roitool will look in the scripts directory.
%
% sids:     A cell array of Subject IDs for roi analysis. If left unspecified
%           a dialog box will appear asking the user to select subjects. Use 
%           the keyword 'allsids' and all subjects in the specified 
%           glm directory will be used for roi analysis. <optional>
%
% coords:   Cell array of coordinates and roi sizes for manually specified ROI. 
%           These will replace any roi specifications in the roi parameters
%           file. <optional> 
%
% Returns
% -------
% roidata:  A structure containing the fields xxxx. 
%
% spm12w_roitool will generate spherical rois or use pre-existing img masks
% to extract parameter estimates from previously generated contrast files during
% 1st level glm analysis. These parameter estimates may then be submitted to
% a number of simple statistcal tests. These are: 
%       - descriptives: means, standard deviations, min/max values.
%       - ttest1: one-sample t-test across participants
%       - ttest2: idependent sample t-test across participants
%       - correl1: correlation between parameter estimates and subject variables
%       - correl2: same as correl1 but split by group.
%
% Variables for each sid are required for ttest2 and correl1 and correl2
% and are to be specified in a variable file references in the roi
% parameters file (i.e., roi.var_file).
%
% The first argument is the name of a roi parameters file (e.g., roi_tutorial.m).
% The second argument (optional) is a cell array of sids (can be left blank to 
% manually select them). The third argument allows the user to manually 
% specify an roi thereby overriding the rois specified in the roi paramters
% file. Parameter estimates for each specified contrast will be saved to a
% tab delimited txt file formatted for importing into any offline
% statistical software (e.g., R, spss, etc.). A seperate text file
% containing results of basic statistics will also be saved to the roi dir.
%
% Note: If you choose to use the sphere rois genereated by spm12w_roitool
% be aware that these are in the space defined by the standard_img_3x3x3.nii
% file. This file is in the same space as our regular pipeline but if you
% decide to resample to a different voxel size or space, the mask will no
% longer be appropriate. You can always verify that the mask is appropriate
% using checkreg with the img files generated by spm8w_roitool.

% Examples:
%
%       >>spm12w_roitool
%       >>spm12w_roitool('roi_file', './scripts/username/roi_tutorial.m', ...
%                        'sids', {'allsids'}, ...
%                        'coords',{[30,30,21],8; [22,22,19],8})
%
% # spm12w was developed by the Wagner, Heatherton & Kelley Labs
% # Author: Dylan Wagner | Created: January, 2010 | Updated: April, 2015
% =======1=========2=========3=========4=========5=========6=========7=========8

% Parse inputs
args_defaults = struct('roi_file','','sids','','coords','');
args = spm12w_args('nargs',0, 'defaults', args_defaults, 'arguments', varargin);

% Load roi parameters
roi = spm12w_getp('type','roi', 'para_file',args.roi_file);

% Setup directories for roi analysis. 
spm12w_dirsetup('dirtype','roi','params',roi);

% Check for cell in case user provided allsids as string.
if ~iscell(args.sids) && ~isempty(args.sids)
    args.sids = cellstr(args.sids);
end

% If sids argument was not provided, open dialog window to get sids.
% If sids argument contained the keyword 'allsids', then get all sids.
% Since we should only do rfx on computed glms, let's look in rfx.glmdir.
if isempty(args.sids)
    args.sids = spm12w_getsid(roi.glmdir);
elseif numel(args.sids) == 1 && strcmp(args.sids,'allsids')
    args.sids = cellstr(ls(fullfile(roi.glmdir,'s*')))';
end

% Check that all appropriate glm dirs and contrasts exist and build up a
% cell array of files per subject per glm condition. Technically this 
% need not be per subject, but just in case different subjects got different
% glms somehow, we should figure out the appropriate con file on a subject
% by subject basis. 
roi.roidata = {}; % Init var for confilenames associated with roi.conds
% Verify the glms and build up the roi.roidata variable.
spm12w_logger('msg',['[DEBUG] Verifying that glm and contrasts exist for ',...
                    'each subject.'],'level',roi.loglevel)
for sid = args.sids
    if ~exist(fullfile(roi.glmdir,sid{1},'SPM.mat'),'file')           
        spm12w_logger('msg',sprintf(['[EXCEPTION] glm ''%s'' for subject %s ', ...
                      'does not exist or is not estimated.'],roi.glm_name, ...
                      sid{1}),'level',roi.loglevel);
        error(['Glm ''%s'' for subject %s does not exist or is not estimated.',...
              'Aborting...'],roi.glm_name,sid{1})      
    else
        for cond = roi.conds
            % Load the SPM file for the GLM (do this subjectwise)
            SPM_ = load(fullfile(roi.glmdir,sid{1},'SPM.mat'));
            % Find the index of the rfx contrast in the SPM.xCon
            conidx = find(strcmp({SPM_.SPM.xCon.name},cond{1}));
            if ~isempty(conidx)
                % Use the index to get the filename of the con file for that sid
                roi.roidata{end+1,1} = sid{1};
                roi.roidata{end,2} = cond{1};
                roi.roidata{end,3} = fullfile(roi.glmdir,sid{1},...
                                              SPM_.SPM.xCon(conidx).Vcon.fname);
            else
                spm12w_logger('msg',sprintf(['[EXCEPTION] condition ''%s'' ',...
                      'for subject %s is not a part of the glm ''%s''.'],...
                      cond{1},sid{1},roi.glm_name),'level',roi.loglevel);
                error(['Condition ''%s'' for subject %s is not part of ',...
                       'glm ''%s''. Aborting...'],cond{1},sid{1},roi.glm_name);      
            end
        end
    end
end

% Resort the file order by contrast and init an empty matrix to hold betas
roi.roidata = sortrows(roi.roidata,[2,1]);

% Iterate through ROIs, pulling data from each contrast and con file.
for roifields = fields(roi.roi)'
    roi_spec = roi.roi.(roifields{1});
    % Check if ROI is a string (i.e., an img mask) or is coordinates
    if ischar(roi_spec)
        spm12w_logger('msg',sprintf(['Performing ROI analysis on region ',...
                      '''%s'' using the mask at:%s'], roifields{1}, roi_spec),...
                      'level',roi.loglevel)
        if ~exist(fullfile(roi_spec),'file')
            if exist(fullfile(roi.roimask, roi_spec),'file')
                roi_spec = fullfile(roi.roimask, roi_spec);
            else
                spm12w_logger('msg',sprintf(['[EXCEPTION] Roi mask ''%s'' ',...
                      'not found. Did you provide the full path?'],...
                      roi_spec),'level',roi.loglevel);
                error('Roi mask %s not found', roi_spec);   
            end        
        end          
        tmpdata = spm12w_readnii('niifiles',roi.roidata(:,3),...
                           'mask',roi_spec,'vox_avg',1);  
        roi.roidata = [roi.roidata, {tmpdata.maskdata}'];
    elseif isnumeric(roi_spec)
        % Check if roi sphere size is set, if not use default value. 
        if length(roi_spec) ~= 4
            roi_spec(4) = roi.roi_size;
        end
        spm12w_logger('msg',sprintf(['Performing ROI analysis on region ',...
                      '''%s'' using a %dmm sphere at %d,%d,%d'], roifields{1}, ...
                      roi_spec(4), roi_spec(1:3)),'level',roi.loglevel)
        tmpdata = spm12w_readnii('niifiles',roi.roidata(:,3),...
                           'sphere',roi_spec,'vox_avg',1); 
        roi.roidata = [roi.roidata, {tmpdata.spheredata}'];
    end
end

% Write roidata to tab delimited text file. 
roifile = fullfile(roi.roidir,[roi.roi_name,'.txt']);                               
fid = fopen(roifile,'w'); % Open the file, overwriting prior contents  

% Print the first column headers
fprintf(fid,'%s\t%s\t%s\t','Subject','Condition','File');  

% Loop through all ROI regions and print their names as column headers
for roifields = fields(roi.roi)'
    fprintf(fid,'%s\t',roifields{1}); 
end

% Loop through each row of roidata and print subject, condition and file
for roidata_i = 1:size(roi.roidata,1)
    fprintf(fid,'\n%s\t%s\t%s\t',roi.roidata{roidata_i,1:3});
    % Now loop through the columns of extracted data
    for roidata_col = 4:size(roi.roidata,2)
        fprintf(fid,'%6.3f\t',roi.roidata{roidata_i,roidata_col});
    end
end

% Close the file
fclose(fid);
spm12w_logger('msg',sprintf('Roi data saved to roi file ''%s'' at: %s',...
                     [roi.roi_name,'.txt'], roifile),'level',roi.loglevel)
                 
% Generate basic ROI statistics
% Set output file for saving statistics.
statsfile = fullfile(roi.roidir,[roi.roi_name,'_stats.txt']);   
diary(statsfile)
% Check if need to load variable file for ttest2 or correl1 and correl2

% Magic

% Stats complete... Turn off the diary.
diary off

% Save roi mat file
matfile = fullfile(roi.roidir,[roi.roi_name,'.mat']);
save(matfile,'roi');

% Print final words
msglist{1} = roi.niceline;
msglist{2} = sprintf('Roi data   : %s', roifile);
msglist{3} = sprintf('Statistics : %s', statsfile);
msglist{4} = sprintf('Parameters : %s', matfile);

for msg = msglist
    spm12w_logger('msg',msg{1},'level',roi.loglevel)
end    